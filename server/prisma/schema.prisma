// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id       String        @id @default(uuid())
  title    String
  body     String
  comments Comment[]
  likes    PostLike[]
  dislikes PostDislike[]
  scrollIndex  Int      @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  subreddit   Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  subredditId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model User {
  id            String        @id @default(uuid())
  name          String        @unique
  password      String        
  email         String        @unique
  scrollIndex  Int      @unique @default(autoincrement())
  
  comments      Comment[]
  likedComments CommentLike[]
  likedPosts    PostLike[]

  posts            Post[]
  dislikedComments CommentDislike[]
  dislikedPosts    PostDislike[]

  subbedTo         Subreddit[]      @relation("Subscription")
  adminTo          Subreddit[]      @relation("Admin")

  followedUsers User[] @relation("Follow")
  followedBy User[] @relation("Follow")
}

model Comment {
  id        String           @id @default(uuid())
  body      String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  scrollIndex  Int      @unique @default(autoincrement())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?         @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[]        @relation("ParentChild")
  parentId  String?
  likes     CommentLike[]
  dislikes  CommentDislike[]
}

model CommentLike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}

model PostLike {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
}

model CommentDislike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}

model PostDislike {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
}

model Subreddit {
  id     String @id @default(uuid())
  name   String @unique
  description String @default("")
  admins User[] @relation("Admin")
  posts  Post[]

  scrollIndex  Int      @unique @default(autoincrement())

  subscribedUsers User[] @relation("Subscription")
}
